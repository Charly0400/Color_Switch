//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Script/Input_System/Player_Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Inputs"",
    ""maps"": [
        {
            ""name"": ""ClickAndSpace"",
            ""id"": ""d7a2d69e-04cf-45e3-9062-9ef800eb3c49"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4dde9692-0f4f-4c6e-af0c-7e2a963d73e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""06c3be03-7ae7-46a0-95a5-e81edb9abf78"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6277e98f-3546-412f-b253-2f61cf03ca46"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ClickAndSpace
        m_ClickAndSpace = asset.FindActionMap("ClickAndSpace", throwIfNotFound: true);
        m_ClickAndSpace_Jump = m_ClickAndSpace.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ClickAndSpace
    private readonly InputActionMap m_ClickAndSpace;
    private IClickAndSpaceActions m_ClickAndSpaceActionsCallbackInterface;
    private readonly InputAction m_ClickAndSpace_Jump;
    public struct ClickAndSpaceActions
    {
        private @Player_Inputs m_Wrapper;
        public ClickAndSpaceActions(@Player_Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_ClickAndSpace_Jump;
        public InputActionMap Get() { return m_Wrapper.m_ClickAndSpace; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ClickAndSpaceActions set) { return set.Get(); }
        public void SetCallbacks(IClickAndSpaceActions instance)
        {
            if (m_Wrapper.m_ClickAndSpaceActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_ClickAndSpaceActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ClickAndSpaceActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ClickAndSpaceActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_ClickAndSpaceActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public ClickAndSpaceActions @ClickAndSpace => new ClickAndSpaceActions(this);
    public interface IClickAndSpaceActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
}
